<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/png" href="images/favicon.png">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
  <script src="https://kit.fontawesome.com/cb6e2d0252.js" crossorigin="anonymous"></script>
  <link rel="stylesheet" type="text/css" href="/public/style.css">
  <title>IsItMalware</title>
</head>

<body>

  <div class="col-6 mx-auto mt-5 text-center">
    <h6>Analyse suspicious files <sup>(no larger than 32MB)</sup> and URLs to detect malware and other breaches,
      automatically share them with the security
      community.</h6>
    <p>This is all in thanks to the <a href="https://developers.virustotal.com/reference/overview">VirusTotal API</a>
    </p>
  </div>
  <!-- URL or File selection-->
  <div id="selectorContainer" class="d-flex justify-content-center mt-5">
    <div class="btn-group btn-group-lg" role="group" aria-label="Basic radio toggle button group">
      <input type="radio" class="btn-check" name="btnradio" id="btnURL" autocomplete="off" checked>
      <label class="btn btn-outline-primary" for="btnURL">URL</label>

      <input type="radio" class="btn-check" name="btnradio" id="btnFile" autocomplete="off">
      <label class="btn btn-outline-primary" for="btnFile">File</label>
    </div>
  </div>
  <!-- URL -->
  <div id="url-container" class="mx-auto col-sm-6 col-10 mt-5 text-center">
    <div class="input-group mb-3 col-sm-6">
      <input id="url" type="text" class="form-control mx-auto d-block w-50 col-sm-6" placeholder="Enter URL here"
        aria-label="Recipient's username" aria-describedby="button-addon2">
      <button class="btn btn-outline-secondary" type="button" id="urlButtonSubmit" onclick="addData()">Submit</button>
    </div>
    <div data-title="dot-pulse" id="loadingAnimationUrl">
      <div class="stage">
        <div class="dot-pulse"></div>
      </div>
    </div>
    <div id="cardBody" class="card mx-auto mt-3" style="width: 18rem;">
      <div class="card-body">
        <h5 class="card-title mx-auto" id=cardName></h5>
        <button type="button" class="btn btn-info mx-auto mt-1" id="seeMoreButton2">See More</button>
        <div class="accordion mt-3" id="accordionCardInfo">
          <!-- url info -->
        </div>
      </div>
      <div class="card-body">
        <button type="button" class="btn btn-info" id="seeMoreButton">See More</button>
      </div>
      <ul class="list-group list-group-flush">
        <li class="list-group-item">Harmless: <span id="harmless"></span></li>
        <li class="list-group-item">Malicious: <span id="malicious"></span></li>
        <li class="list-group-item">Suspicious: <span id="suspicious"></span></li>
        <li class="list-group-item">Undetected: <span id="undetected"></span></li>
      </ul>
    </div>
  </div>
  <!-- FILE -->
  <div id="fileContainer" class="mx-auto col-sm-6 col-10 mt-5 text-center">
    <div class="mx-auto" id="dropzone">
      <p class="mb-0" id="dropFilesBox">Click to browse/ Drop your files here</p>
      <input type="file" id="fileInput" class="mx-auto col-12 form-control-file btn btn-outline-secondary">
    </div>

    <h6 class="mt-5">Please wait at least 10 seconds after an upload. If an upload is taking too long please retry.</h6>

    <div data-title="dot-pulse" id="loadingAnimationFile">
      <div class="stage">
        <div class="dot-pulse"></div>
      </div>
    </div>
    <div id="fileCardBody" class="card mx-auto mt-3" style="width: 18rem;">
      <div class="card-body">
        <h5 class="card-title mx-auto" id=fileCardName></h5>
        <button type="button" class="btn btn-info mx-auto mt-1" id="fileSeeMoreButton2">See More</button>
        <div class="accordion mt-3" id="accordionFileCardInfo">
          <!-- file info -->
        </div>
      </div>
      <div class="card-body">
        <button type="button" class="btn btn-info" id="fileSeeMoreButton">See More</button>
      </div>
      <ul class="list-group list-group-flush">
        <li class="list-group-item">Harmless: <span id="fileHarmless"></span></li>
        <li class="list-group-item">Malicious: <span id="fileMalicious"></span></li>
        <li class="list-group-item">Suspicious: <span id="fileSuspicious"></span></li>
        <li class="list-group-item">Undetected: <span id="fileUndetected"></span></li>
      </ul>
    </div>

  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
    crossorigin="anonymous"></script>
  <script>

    // URL OR FILE BUTTON CLICKED
    const urlChecked = document.getElementById('btnURL');
    const urlDiv = document.getElementById('url-container');
    const fileChecked = document.getElementById('btnFile');
    const fileDiv = document.getElementById('fileContainer');
    let responseData;
    urlChecked.addEventListener('click', checkFunc);
    fileChecked.addEventListener('click', checkFunc);
    function checkFunc() {
      if (urlChecked.checked == false) {
        fileDiv.style.display = "block";
        urlDiv.style.display = "none";
      } else {
        fileDiv.style.display = "none"
        urlDiv.style.display = "block";
      }
    }

    // FILE API GET/POST REQUESTS
    const dropzone = document.getElementById('dropzone');
    const fileInput = document.getElementById('fileInput');

    dropzone.addEventListener('click', () => {
      fileInput.click();
    });

    // Add drag and drop listeners
    dropzone.addEventListener('dragenter', highlight);
    dropzone.addEventListener('dragover', highlight);
    dropzone.addEventListener('dragleave', unhighlight);
    dropzone.addEventListener('drop', unhighlight);
    dropzone.addEventListener('drop', handleDrop);

    // File input listener
    fileInput.addEventListener('change', handleFileInput);

    function highlight(e) {
      dropzone.classList.add('highlight');

      e.preventDefault();
      e.stopPropagation();
    }

    function unhighlight(e) {
      dropzone.classList.remove('highlight');

      e.preventDefault();
      e.stopPropagation();
    }

    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;

      handleFiles(files);

      e.preventDefault();
      e.stopPropagation();
    }

    function handleFileInput(e) {
      const files = e.target.files;
      if (files[0].size >= 32000000) {
        alert('File is too powerful, please use file below 32MB')
      } console.log(files[0].size, 'file size')
      const card = document.getElementById('fileCardBody');
      card.style.display = "none";
      fileLoading.style.display = 'block';
      handleFiles(files);
    }

    function handleFiles(files) {
      if (files.length > 1) {
        console.log('You can only upload one file at a time')
        return
      }
      card.style.display = "none";
      fileLoading.style.display = 'block';

      getAnalysisID(files[0])
    }

    function errFunc() {
      getAnalysisID(files[0]);
    }

    function getAnalysisID(fileInput) {
      fileName = fileInput.name;
      console.log(fileInput, 'fileInput inside getAnalysisID')
      // const file = new File(fileInput, fileInput.name, fileInput.type);

      const formData = new FormData();
      formData.append("file", fileInput);


      fetch('https://urlproxytesting-production.up.railway.app/upload', {
        method: "POST",
        body: formData
      })
        .then(response => response.text())
        .then(responseText => {
          report = JSON.parse(responseText);
          console.log('received report from proxy', report)
          fileCardActivate(report)
        })
        .catch(error => {
          console.error('Error:', error)
          function startCountdown(seconds, callback) {
            const counter = seconds;
            const interval = setInterval(function () {
              counter--;
              console.log("Countdown: " + counter);
              if (counter <= 0) {
                clearInterval(interval);
                callback();
              }
            }, 1000);
          }
          function alertFunc() {
            errFunc();
          }
          startCountdown(15, alertFunc);
        });
    }
    let fileName;
    function fileCardActivate(response) {
      const card = document.getElementById('fileCardBody');
      const cardName = document.getElementById('fileCardName');
      const harmless = document.getElementById('fileHarmless');
      const malicious = document.getElementById('fileMalicious');
      const suspicious = document.getElementById('fileSuspicious');
      const undetected = document.getElementById('fileUndetected');
      // Make changes to the card
      console.log('response.data.attributes', response.data.attributes)
      cardName.innerText = JSON.stringify(fileName).replace(/\"/g, '');
      harmless.innerText = JSON.stringify(response.data.attributes.last_analysis_stats.harmless)
      malicious.innerText = JSON.stringify(response.data.attributes.last_analysis_stats.malicious)
      suspicious.innerText = JSON.stringify(response.data.attributes.last_analysis_stats.suspicious)
      undetected.innerText = JSON.stringify(response.data.attributes.last_analysis_stats.undetected)
      // Activate the card
      card.style.display = "block";
      fileLoading.style.display = 'none';
      const fileResponseData = response.data.attributes.last_analysis_results;

      for (let prop in fileResponseData) {
        let label = prop.replace(/\s/g, '');
        let body;
        let innerObj = fileResponseData[prop];
        for (let innerProp in innerObj) {
          body += `<br> <em>${innerProp}</em>: ${innerObj[innerProp]}<br>`;
        }
        fileCardInfo.innerHTML +=
          `<div class="accordion-item">
              <h2 class="accordion-header" id="${label}-heading">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsec${label}" aria-expanded="false" aria-controls="collapsec${label}">
                  ${prop}
                </button>
              </h2>
              <div id="collapsec${label}" class="accordion-collapse collapse" aria-labelledby="${label}-heading" data-bs-parent="#accordionFileCardInfo">
                <div class="accordion-body">
                  ${body}
                </div>
              </div>
            </div>`;
      }

    }

    const fileCardInfo = document.getElementById('accordionFileCardInfo');
    const fileSeeMoreButton = document.getElementById('fileSeeMoreButton');
    const fileSeeMoreButton2 = document.getElementById('fileSeeMoreButton2');
    fileSeeMoreButton.addEventListener('click', fileInfoButton)
    fileSeeMoreButton2.addEventListener('click', fileInfoButton)

    function fileInfoButton() {
      if (fileCardInfo.style.display == "") {
        fileSeeMoreButton.innerText = "See Less";
        fileSeeMoreButton2.innerText = "See Less";
        fileSeeMoreButton2.style.display = "block";
        fileCardInfo.style.display = "block";
      } else {
        fileCardInfo.style.display = "";
        fileSeeMoreButton.innerText = "See More";
        fileSeeMoreButton2.innerText = "See More";
        fileSeeMoreButton2.style.display = "none";
      }
    }

    const urlLoading = document.getElementById('loadingAnimationUrl');
    const fileLoading = document.getElementById('loadingAnimationFile');
    const addData = async () => {
      const originalURL = document.getElementById("url").value;
      card.style.display = "none";
      urlLoading.style.display = 'block';
      const encodedURL = btoa(originalURL).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
      await getData(encodedURL);
    };

    const getData = async (eURL) => {
      const proxyUrl = `https://urlproxytesting-production.up.railway.app/?eURL=${eURL}`;

      fetch(proxyUrl)
        .then(response => response.json())
        .then(response => dataText(response))
        .catch(err => console.error(err));
    };

    const card = document.getElementById('cardBody');
    function dataText(response) {
      console.log('inside dataText function')
      console.log(response)
      responseData = response.data.attributes.last_analysis_results;
      resData = JSON.stringify(responseData).replace(/\"/g, '').slice(1, -1).split(',');

      for (let prop in responseData) {
        let label = prop.replace(/\s/g, '');
        let body;
        let innerObj = responseData[prop];
        for (let innerProp in innerObj) {
          body += `<br> <em>${innerProp}</em>: ${innerObj[innerProp]}<br>`;
        }
        cardInfo.innerHTML +=
          `<div class="accordion-item">
              <h2 class="accordion-header" id="${label}-heading">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse${label}" aria-expanded="false" aria-controls="collapse${label}">
                  ${prop}
                </button>
              </h2>
              <div id="collapse${label}" class="accordion-collapse collapse" aria-labelledby="${label}-heading" data-bs-parent="#accordionCardInfo">
                <div class="accordion-body">
                  ${body}
                </div>
              </div>
            </div>`;
      }

      const card = document.getElementById('cardBody');
      const cardName = document.getElementById('cardName');
      const harmless = document.getElementById('harmless');
      const malicious = document.getElementById('malicious');
      const suspicious = document.getElementById('suspicious');
      const undetected = document.getElementById('undetected');

      urlLoading.style.display = 'none';
      // Make changes to the card
      cardName.innerText = JSON.stringify(response.data.attributes.title).replace(/\"/g, '');
      harmless.innerText = JSON.stringify(response.data.attributes.last_analysis_stats.harmless)
      malicious.innerText = JSON.stringify(response.data.attributes.last_analysis_stats.malicious)
      suspicious.innerText = JSON.stringify(response.data.attributes.last_analysis_stats.suspicious)
      undetected.innerText = JSON.stringify(response.data.attributes.last_analysis_stats.undetected)
      // Activate the card
      card.style.display = "block";
    }
    const cardInfo = document.getElementById('accordionCardInfo');
    const seeMoreButton = document.getElementById('seeMoreButton');
    const seeMoreButton2 = document.getElementById('seeMoreButton2');
    seeMoreButton.addEventListener('click', infoButton)
    seeMoreButton2.addEventListener('click', infoButton)

    function infoButton() {
      if (cardInfo.style.display == "") {
        seeMoreButton.innerText = "See Less";
        seeMoreButton2.innerText = "See Less";
        seeMoreButton2.style.display = "block";
        cardInfo.style.display = "block";
      } else {
        cardInfo.style.display = "";
        seeMoreButton2.style.display = "";
        seeMoreButton.innerText = "See More";
        seeMoreButton2.innerText = "See More";
      }
    }

  </script>
</body>

</html>